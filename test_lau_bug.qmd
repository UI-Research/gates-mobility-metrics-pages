---
title: 'Stand-in Title'
author: ''
date: ''
font: Lato
output:
  html_document:
    self_contained: TRUE
    toc: TRUE
    toc_float: TRUE
    mathjax: null
    css: www/web_report.css
    output_dir: "."
    editor_options:
      chunk_output_type: console
params:
  state_county: !expr c("42095", "42017", "48453", "09003")
  fake_labels: false
  state_title: false
execute:
  echo: false
  warning: false
  message: false
  error: true
  output: asis
---

```{r header-image, fig.width = 5.14, fig.height = 1.46, echo = FALSE}

# All defaults
knitr::include_graphics(here::here("www", "images", "urban-institute-logo.png"))

```

```{r setup}
library(here)
library(data.table)
library(gt)
library(tidyverse)
library(glue)
library(rlang)
library(scales)
library(qdapRegex)
library(purrr)

options(scipen = 999)

source(here::here("R", "get_vars_info.R"))
source(here::here("R", "unite_col_values.R"))
source(here::here("R", "gen_variable_name_map.R"))
source(here::here("R", "create_tb.R"))
source(here::here("R", "create_tb_level2.R"))

source(here::here("R", "create_tb_level2_no_tabs.R"))


source(here::here("R", "create_tb_level3.R"))
source(here::here("R", "create_tb_multi_yr.R"))

```


```{r set-vars}

# set constant variables 

tb_title_size <- 18
tb_title_font <- "bold"

tb_subtitle_size <- 14
tb_title_font <- "normal"
tb_font_size <- 12 

source_note_size <- 11
source_note_font <- "normal"

tb_width_perc <- 80
tb_align <- "left"

decimal_points <- 2
income_decimal <- 0


# Get a list of all variables that should be presented as percentage 
perc_vars <- c(
  "share_debt_coll", # % with debt
  "share_burdened_80_ami", 
  "share_burdened_50_ami",
  "share_burdened_30_ami",
  "homeless_share", # share homeless
  "famstruc_2par_married", # Two married biological/adoptive parents
  "famstruc_1par_noadults", # One biological/adoptive parent and that parent's current spouse/partner
  "famstruc_1par_plusadults", # One biological/adoptive parent and at least one other adult
  "famstruc_0par_2adults", # One biological/adoptive parent
  "famstruc_2par_unmarried", # Two adults, no parent
  "famstruc_0par_other", # Other
  "election_turnout", # % voting 
  "lbw", # % low birthweight
  "white_nh_exposure",
  "black_nh_exposure",
  "hispanic_exposure",
  "other_nh_exposure",
  "poverty_exposure", # % in high poverty
  "frpl40_total", # student poverty concentration
  "frpl40_white", 
  "frpl40_black",
  "frpl40_hispanic", 
  "share_in_preschool", # % in pre k 
  "share_hs_degree", 
  "share_employed" # % with HS degree
)

```


```{r read-in-data}

subdir <- "mobility-metrics"
fpath_no_subgroup <- glue("{subdir}/01_mobility-metrics.csv")
fpath_race_ethnicity <- glue("{subdir}/02_mobility-metrics_race-ethnicity.csv")
fpath_race <- glue("{subdir}/03_mobility-metrics_race.csv")
fpath_race_share <- glue("{subdir}/04_mobility-metrics_race-share.csv")
env_quality_poverty <- glue("{subdir}/environmental-exposure_poverty.csv")
education_income <- glue("{subdir}/SEDA_income.csv")
poverty_race <- glue("{subdir}/poverty-exposure_race.csv")

fpath_multi_year <- glue("{subdir}/00_mobility-metrics_longitudinal.csv")

my_col_type <- cols(state=col_character(), county = col_character())

identifying_vars <- c("subgroup_id", "state", "county", "state_name", 
                      "county_name", "population", "subgroup_type", "subgroup")

#read in metrics with subgroups 
data_w_subgroups <- bind_rows(list(race_ethnicity=read_csv(fpath_race_ethnicity, col_types = my_col_type), 
                                   race = read_csv(fpath_race, col_types = my_col_type), 
                                   race_poverty = read_csv(poverty_race, col_types = my_col_type), 
                                   race_share = read_csv(fpath_race_share, col_types = my_col_type),
                                   poverty = read_csv(env_quality_poverty, col_types = my_col_type),
                                   income = read_csv(education_income, col_type = my_col_type)), 
                              .id="subgroup_id")

#read in metrics without subgroups
data_no_subgroups <- read_csv(fpath_no_subgroup, col_types = my_col_type, guess_max = 10000) %>% 
  mutate(subgroup_id = "none", subgroup_type = "all", subgroup = "All")

metrics_no_subgroup <- c(identifying_vars,
                         colnames(data_no_subgroups)[!(colnames(data_no_subgroups) %in% colnames(data_w_subgroups))])

data_no_subgroups_clean <- data_no_subgroups %>% select(all_of(metrics_no_subgroup))

#combine metrics with and without subgroups together 
data_not_multi_year <- bind_rows(data_w_subgroups, data_no_subgroups_clean)

data <- bind_rows(list(`0` = data_not_multi_year, 
                       `1` = read_csv(fpath_multi_year, col_types = my_col_type, guess_max = 20000)), 
                  .id = "is_year")

```


```{r clean-data}  
# data cleaning 
data <- data %>% 
  mutate(state = str_pad(state, width = 2, side ="left", pad = "0"), #set max ub as 1 
         county = str_pad(county, width = 3, side ="left", pad = "0")) %>% 
  # fix a few data issues
  mutate(
    juvenile_arrest_rate = if_else(state == "12", as.numeric(NA), juvenile_arrest_rate),
    crime_rate_quality = case_when(
      state == "36" & county %in% c("005", "047", "081", "085", "061") ~ 1,
      crime_rate_quality == 1 ~ 2,
      TRUE ~ crime_rate_quality
    )
  )

if (params$fake_labels) {
  
  data <- data %>%
    mutate(state_county = paste0(state, county)) %>%
    mutate(county_name =
             case_when(
               state_county == params$state_county[1] ~ "Upward County County",
               state_county == params$state_county[2] ~ "Peer 1",
               state_county == params$state_county[3] ~ "Peer 2",
               state_county == params$state_county[4] ~ "Peer 3",
             )
    )
  
  data <- data %>%
    mutate(state_name = "MB") 
}


metrics_summary <- "metrics_summary.csv"
m_info <- fread(metrics_summary)

m_info <- m_info %>% 
  mutate_at(vars(c("notes", "metrics_description", "source_data")), 
            function(x) gsub("&#700;", "'", x)) %>% 
  mutate_at(vars(c("notes", "metrics_description", "source_data")), 
            function(x) gsub("\"\"", "\"", x)) %>% 
  mutate_if(is.character, list(~na_if(.,""))) %>% 
  mutate(source_data2 = ifelse(is.na(source_data2), source_data, source_data2)) %>% 
  mutate(notes2 =  ifelse(!is.na(notes2), paste(notes, notes2), notes)) %>%
  mutate(notes3 =  ifelse(!is.na(notes3), paste(notes, notes3), notes))

#create unique state-county identifier
data <- data %>% 
  unite("full_fips", state, county, sep = "", remove = FALSE) %>% 
  group_by(full_fips) %>% 
  fill(state_name, .direction = "updown") %>% 
  fill(county_name, .direction = "updown") %>% 
  ungroup() %>% 
  unite("state_county", county_name, state_name, sep = ", ", remove = FALSE) %>% 
  filter(full_fips %in% (params$state_county)) %>% #problem in this line
  arrange(factor(full_fips, levels = params$state_county)) %>% 
  mutate(state_county = gsub("County", "", state_county)) %>% 
  mutate(state_county = rm_white_comma(state_county)) 

data <- data %>%
  mutate(state_county = str_to_title(state_county))

if (!params$state_title) {
  
  #get the upward county - the first element in the parameter 
  upward_county <- data %>% 
    filter(full_fips == params$state_county[1]) %>% 
    select(state_county) %>% 
    pull() %>% 
    first()
  
} else {
  
    #get the upward county - the first element in the parameter 
  upward_county <- data %>% 
    filter(full_fips == params$state_county[1]) %>% 
    select(state_name) %>% 
    pull() %>% 
    first()
  
  upward_county <- paste("Selected Counties in", upward_county)
  
}

# get a full list of variables that are percentage 
perc_vars_lb <- purrr::map_chr(perc_vars, ~ paste0(., "_lb"))
perc_vars_ub <- purrr::map_chr(perc_vars, ~ paste0(., "_ub"))
lst <- list(perc_vars, perc_vars_lb, perc_vars_ub)
all_perc_vars <- sort(lst %>% reduce(c))

# filter to get the ones only existing in the data 
perc_vars_in_data <- all_perc_vars[(all_perc_vars %in% colnames(data))]


numeric_vars_one_digit <- data %>% 
  select(-average_to_living_wage_ratio) %>% 
  select(-full_fips, -year) %>% 
  select(-learning_rate, -learning_rate_lb, -learning_rate_ub) %>%
  select(-all_of(perc_vars_in_data)) %>% 
  select(-starts_with("share_burdened")) %>%
  select_if(is.numeric) %>% 
  names()


data <- data %>% 
  mutate_at(vars(matches("share_affordable_")),  #for affordable housing variables, multiple the value by 100
            function(x) x*100) %>%
  mutate_at(vars(matches("share_hs_degree_ub")),     #update ub for share_hs_degree to 1
            function(x) case_when(x > 1 ~ 1, TRUE  ~ x)) %>%
  mutate_at(perc_vars_in_data,             #convert to percentage
            function (x) scales::percent(x, accuracy = 0.1)) %>%
  mutate_at(numeric_vars_one_digit,
            function(x) {format(round(x, 1), big.mark=",", scientific=FALSE)}) %>%
  mutate_at(vars(matches("average_to_living_wage_ratio")), funs(as.numeric)) %>%
  mutate_at(vars(matches("average_to_living_wage_ratio")),
            function(x) {format(round(x, 2), big.mark=",",scientific=FALSE)}) %>%
  mutate(na_quality = "NA")  %>%  #to be used for metrics where there is no quality variable %>%
  mutate_at(vars(-one_of(c("state_county", "subgroup"))),
            function(x) gsub("\\s+", "", x)) %>%   #remove whitespace in values
  rename(hispanic_representation = hispanic,
         hispanic_representation_quality = hispanic_quality) %>%
  mutate_at(vars(ends_with("_quality")),
            function(x) recode(x, `1` = "Good", `2` = "Marginal", `3` = "Poor"))

note_ul_bound <- "Lower/Upper bound"


```

# `r upward_county`

<br><br>

## Pillar: Opportunity-Rich & Inclusive Neighborhoods

<br> 

#### Predictor: Housing Affordability {.tabset .avoidpagebreak}


##### Summary

```{r affordable-housing}
housing_varlist <- list(
  c(
    "share_affordable_80_ami", 
    "share_affordable_50_ami",
    "share_affordable_30_ami"
  ), 
  c(
    "Ratio for low-income households", 
    "Ratio for very low-income households",
    "Ratio for extremely low-income households"
  ), 
  c(
    "share_affordable_80_ami", 
    "share_affordable_80_ami_ci", 
    "share_affordable_50_ami",
    "share_affordable_50_ami_ci",
    "share_affordable_30_ami",
    "share_affordable_30_ami_ci"
  ), 
  c("Ratio for low-income households", 
    "Ratio for low-income households_ci", 
    "Ratio for very low-income households", 
    "Ratio for very low-income households_ci",
    "Ratio for extremely low-income households", 
    "Ratio for extremely low-income households_ci" 
  )
)

af_m_info_lst <- get_vars_info("Affordable housing", data_summary_file = m_info)$info_lst


create_tb(metrics_info_df = af_m_info_lst, 
          dataset = data, 
          varname_maps = housing_varlist) 

```


<br>

##### Detail


<!-- ```{r} -->


<!-- create_tb_level2_no_tabs(metrics_info_df = af_m_info_lst,  -->
<!--           dataset = data,  -->
<!--           varname_maps = housing_varlist)  -->
<!-- ``` -->

```{r affordable-housing-table2}

# metrics_info_df <- af_m_info_lst
# dataset <- data
# varname_maps <- housing_varlist
```

```{r}
# #| output: asis
# 
# cat(
#   knitr::knit_child("R/create_tb_level2_no_tabs.qmd",
#                    envir = environment(),
#                    quiet = TRUE),
#   sep =  "\n"
# )

```


<br>

##### More Years

```{r affordable-housing-table3}
create_tb_multi_yr(metrics_info_df = af_m_info_lst,
                   dataset = data,
                   varname_maps = housing_varlist)

```